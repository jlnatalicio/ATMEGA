
Squarewave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000000fc  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000d3  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a1  00000000  00000000  000002a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000e1  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000058  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000160  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000049  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000629  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_14>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8e:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_14>:

uint8_t interrompido = 1;

/*--------------------------------------------------bloco de interrupção do TC0-------------------------------------------*/
ISR(TIMER0_COMPA_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	if (interrompido < 2)
  a4:	80 91 00 01 	lds	r24, 0x0100
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	28 f4       	brcc	.+10     	; 0xb6 <__vector_14+0x20>
	{
		interrompido++;
  ac:	8f 5f       	subi	r24, 0xFF	; 255
  ae:	80 93 00 01 	sts	0x0100, r24
		asm("nop");
  b2:	00 00       	nop
  b4:	07 c0       	rjmp	.+14     	; 0xc4 <__vector_14+0x2e>
	} 
	else
	{
		PORTB ^= (1<<PORTB2);                            // quando contador estourar, realizar troca de estado do bit PB2
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	89 27       	eor	r24, r25
  bc:	85 b9       	out	0x05, r24	; 5
		interrompido = 1;	
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 00 01 	sts	0x0100, r24
	}
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <iniciar_timer>:
    }
}

void iniciar_timer(void)
{
	TCCR0A = 0b01000010;                                  // habilita modo CTC, com TOP em OCR0A || (1<<WGM01) | (1<<WGM00)
  d2:	82 e4       	ldi	r24, 0x42	; 66
  d4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 64;                                           // valor do registrador de comparacao da saida OC0A (TOP)
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0b00000010;                                  // habilita a interrupcao do TC0 || 1<<OCIE0A
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6e 00 	sts	0x006E, r24
	TCCR0B = 0b10000101;                                  /* TC0 com prescaler de 1024, a 16 MHz gera uma
  e0:	85 e8       	ldi	r24, 0x85	; 133
  e2:	85 bd       	out	0x25, r24	; 37
  e4:	08 95       	ret

000000e6 <main>:

void iniciar_timer(void);

int main(void)
{
	DDRB  = 0b00000100;                                   // ativando somente o bit 2 do registrador PORTB como saida
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11111011;                                   // habilita pull-ups nos terminais nao utilizados
  ea:	8b ef       	ldi	r24, 0xFB	; 251
  ec:	85 b9       	out	0x05, r24	; 5
	
	iniciar_timer();                                      //carrega interrupcao do timer 0
  ee:	0e 94 69 00 	call	0xd2	; 0xd2 <iniciar_timer>
	sei();                                                // habilita a chave de interrupcao global (datasheet)
  f2:	78 94       	sei
	
    while(1)
    {
        //TODO:: Please write your application code 
		asm("nop");
  f4:	00 00       	nop
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <main+0xe>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
