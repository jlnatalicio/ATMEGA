
UNO_blink1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000167  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d8  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000166  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000184  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000012c  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define clearBit(reg,bit) (reg &= ~(1<<bit))
#define toogleBit(reg,bit) (reg ^= (1<<bit))

int main(void) {
	
	setBit(DDRB, PORTB5);
  80:	25 9a       	sbi	0x04, 5	; 4
	clearBit(PORTB, PORTB5);
  82:	2d 98       	cbi	0x05, 5	; 5
	
    while(1) {
		
		// piscando LED 3 vezes rapidamente:
		for (int i = 0; i < 6; i++) {
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	56 e0       	ldi	r21, 0x06	; 6
  8a:	40 e0       	ldi	r20, 0x00	; 0
			toogleBit(PORTB, PORTB5);
			_delay_ms(250);
		}
		
		for (int i = 0; i < 6; i++) {
			toogleBit(PORTB, PORTB5);
  8c:	30 e2       	ldi	r19, 0x20	; 32
	clearBit(PORTB, PORTB5);
	
    while(1) {
		
		// piscando LED 3 vezes rapidamente:
		for (int i = 0; i < 6; i++) {
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	10 c0       	rjmp	.+32     	; 0xb4 <main+0x34>
			toogleBit(PORTB, PORTB5);
  94:	25 b1       	in	r18, 0x05	; 5
  96:	23 27       	eor	r18, r19
  98:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	e4 e3       	ldi	r30, 0x34	; 52
  9e:	fc e0       	ldi	r31, 0x0C	; 12
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	e0 40       	sbci	r30, 0x00	; 0
  a4:	f0 40       	sbci	r31, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2a>
  aa:	00 00       	nop
	clearBit(PORTB, PORTB5);
	
    while(1) {
		
		// piscando LED 3 vezes rapidamente:
		for (int i = 0; i < 6; i++) {
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <main+0x34>
  b0:	87 2f       	mov	r24, r23
  b2:	96 2f       	mov	r25, r22
  b4:	86 30       	cpi	r24, 0x06	; 6
  b6:	91 05       	cpc	r25, r1
  b8:	6c f3       	brlt	.-38     	; 0x94 <main+0x14>
  ba:	85 2f       	mov	r24, r21
  bc:	94 2f       	mov	r25, r20
			toogleBit(PORTB, PORTB5);
			_delay_ms(250);
		}
		
		for (int i = 0; i < 6; i++) {
			toogleBit(PORTB, PORTB5);
  be:	25 b1       	in	r18, 0x05	; 5
  c0:	23 27       	eor	r18, r19
  c2:	25 b9       	out	0x05, r18	; 5
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	e9 e6       	ldi	r30, 0x69	; 105
  c8:	f8 e1       	ldi	r31, 0x18	; 24
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	e0 40       	sbci	r30, 0x00	; 0
  ce:	f0 40       	sbci	r31, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x4a>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x54>
  d4:	00 00       	nop
  d6:	01 97       	sbiw	r24, 0x01	; 1
		for (int i = 0; i < 6; i++) {
			toogleBit(PORTB, PORTB5);
			_delay_ms(250);
		}
		
		for (int i = 0; i < 6; i++) {
  d8:	00 97       	sbiw	r24, 0x00	; 0
  da:	89 f7       	brne	.-30     	; 0xbe <main+0x3e>
  dc:	e9 cf       	rjmp	.-46     	; 0xb0 <main+0x30>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
